rule  Dev_sigma_suspicious_powershell_parameter_substring {
 meta:
    author = "Florian Roth (rule), Daniel Bohannon (idea), Roberto Rodriguez (Fix)"
    description = "Detects suspicious PowerShell invocation with a parameter substring Author: Florian Roth (rule), Daniel Bohannon (idea), Roberto Rodriguez (Fix)."
    reference = ""
    version = "0.01"
    created = "2019/01/16"
    category = "process_creation"
    product = "windows"
    mitre = "execution, t1086, t1059.001"

  events:
(re.regex($selection.target.process.file.full_path, `.*\\Powershell\.exe`) and (re.regex($selection.target.process.command_line, `.* -windowstyle h .*`) or re.regex($selection.target.process.command_line, `.* -windowstyl h.*`) or re.regex($selection.target.process.command_line, `.* -windowsty h.*`) or re.regex($selection.target.process.command_line, `.* -windowst h.*`) or re.regex($selection.target.process.command_line, `.* -windows h.*`) or re.regex($selection.target.process.command_line, `.* -windo h.*`) or re.regex($selection.target.process.command_line, `.* -wind h.*`) or re.regex($selection.target.process.command_line, `.* -win h.*`) or re.regex($selection.target.process.command_line, `.* -wi h.*`) or re.regex($selection.target.process.command_line, `.* -win h .*`) or re.regex($selection.target.process.command_line, `.* -win hi .*`) or re.regex($selection.target.process.command_line, `.* -win hid .*`) or re.regex($selection.target.process.command_line, `.* -win hidd .*`) or re.regex($selection.target.process.command_line, `.* -win hidde .*`) or re.regex($selection.target.process.command_line, `.* -NoPr .*`) or re.regex($selection.target.process.command_line, `.* -NoPro .*`) or re.regex($selection.target.process.command_line, `.* -NoProf .*`) or re.regex($selection.target.process.command_line, `.* -NoProfi .*`) or re.regex($selection.target.process.command_line, `.* -NoProfil .*`) or re.regex($selection.target.process.command_line, `.* -nonin .*`) or re.regex($selection.target.process.command_line, `.* -nonint .*`) or re.regex($selection.target.process.command_line, `.* -noninte .*`) or re.regex($selection.target.process.command_line, `.* -noninter .*`) or re.regex($selection.target.process.command_line, `.* -nonintera .*`) or re.regex($selection.target.process.command_line, `.* -noninterac .*`) or re.regex($selection.target.process.command_line, `.* -noninteract .*`) or re.regex($selection.target.process.command_line, `.* -noninteracti .*`) or re.regex($selection.target.process.command_line, `.* -noninteractiv .*`) or re.regex($selection.target.process.command_line, `.* -ec .*`) or re.regex($selection.target.process.command_line, `.* -encodedComman .*`) or re.regex($selection.target.process.command_line, `.* -encodedComma .*`) or re.regex($selection.target.process.command_line, `.* -encodedComm .*`) or re.regex($selection.target.process.command_line, `.* -encodedCom .*`) or re.regex($selection.target.process.command_line, `.* -encodedCo .*`) or re.regex($selection.target.process.command_line, `.* -encodedC .*`) or re.regex($selection.target.process.command_line, `.* -encoded .*`) or re.regex($selection.target.process.command_line, `.* -encode .*`) or re.regex($selection.target.process.command_line, `.* -encod .*`) or re.regex($selection.target.process.command_line, `.* -enco .*`) or re.regex($selection.target.process.command_line, `.* -en .*`)))

  condition:
    $selection
}
